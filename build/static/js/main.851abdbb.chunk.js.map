{"version":3,"sources":["Landing.module.css","prstore.jpg","micegreen.jpeg","Landing.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Landing","state","landingRef","React","createRef","phinneyRef","comeRef","storeRef","place","window","addEventListener","e","current","pageYOffset","style","top","transform","console","log","className","classes","LandingContainer","ref","this","src","mice","PhotoContainer","Come","StorefrontContainer","Prstore","Text","TitleBox","Address","Open","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,iBAAmB,kCAAkC,QAAU,yBAAyB,eAAiB,gCAAgC,KAAO,sBAAsB,oBAAsB,qCAAqC,KAAO,sBAAsB,SAAW,0BAA0B,QAAU,yBAAyB,KAAO,wB,oBCD/VD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,6OCyE5BC,E,4MAnEXC,MAAM,CACFC,WAAaC,IAAMC,YACnBC,WAAaF,IAAMC,YACnBE,QAASH,IAAMC,YACfG,SAASJ,IAAMC,a,uDAGV,IAAD,OAEAI,EAAQ,EAoBZ,OAnBAC,OAAOC,iBAAiB,UAAU,SAACC,GAC5B,EAAKV,MAAMC,WAAWU,UACrBJ,EAAQC,OAAOI,YACf,EAAKZ,MAAMC,WAAWU,QAAQE,MAAMC,IAApC,WAA8CP,EAA9C,MACGA,EAAM,MACL,EAAKP,MAAMI,WAAWO,QAAQE,MAAME,UAApC,sBAA+D,EAAER,EAAjE,QAQJS,QAAQC,IAAIV,OAOhB,yBAAKW,UAAaC,IAAQC,kBACtB,yBAAKF,UAAaC,IAAQpB,QAASsB,IAAOC,KAAKtB,MAAMC,YACjD,yBAAKsB,IAAOC,MACZ,uBAAGH,IAAOC,KAAKtB,MAAMI,YAArB,0BAGJ,yBAAKc,UAAaC,IAAQM,iBAE1B,uBAAGP,UAAaC,IAAQO,KAAML,IAAOC,KAAKtB,MAAMK,SAAhD,uBACA,yBAAKa,UAAaC,IAAQQ,qBACtB,yBAAKJ,IAAOK,IAASP,IAAOC,KAAKtB,MAAMM,WACvC,yBAAKY,UAAaC,IAAQU,MACtB,wBAAIX,UAAaC,IAAQW,UAAzB,yBACA,yBAAKZ,UAAaC,IAAQY,SACtB,mEACA,2DACA,4CAEJ,yBAAKb,UAAaC,IAAQa,MACtB,qE,GAlDNC,aCOPC,MARf,WACE,OACE,yBAAKhB,UAAU,OACd,kBAAC,EAAD,QCKeiB,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.851abdbb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LandingContainer\":\"Landing_LandingContainer__2rjwK\",\"Landing\":\"Landing_Landing__OU3yZ\",\"PhotoContainer\":\"Landing_PhotoContainer__1xcYA\",\"Come\":\"Landing_Come__gK6AT\",\"StorefrontContainer\":\"Landing_StorefrontContainer__1dLPx\",\"Text\":\"Landing_Text__zgjzb\",\"TitleBox\":\"Landing_TitleBox__3P595\",\"Address\":\"Landing_Address__1Ouft\",\"Open\":\"Landing_Open__1ZMqa\"};","module.exports = __webpack_public_path__ + \"static/media/prstore.a9d832d2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/micegreen.36740b86.jpeg\";","import React, {Component} from \"react\";\nimport classes from \"./Landing.module.css\";\nimport Prstore from \"./prstore.jpg\";\nimport mice from \"./micegreen.jpeg\";\n\nclass Landing extends Component {\n    state={\n        landingRef : React.createRef(),\n        phinneyRef : React.createRef(),\n        comeRef: React.createRef(),\n        storeRef:React.createRef()\n    }\n\n    render(){\n\n        let place = 0;\n        window.addEventListener(\"scroll\", (e)=>{\n            if(this.state.landingRef.current){\n                place = window.pageYOffset;\n                this.state.landingRef.current.style.top = `${-place}px`;\n                if(place<100){\n                    this.state.phinneyRef.current.style.transform = `translate(0,${3*place}px)`;\n                    }\n                // if(place<450){    \n                // this.state.comeRef.current.style.transform = `translate(0,${-.5*place}px)`;\n                // // this.state.storeRef.current.style.transform = `translate(0,${-.5*place}px)`;\n                // }else{\n                //     this.state.comeRef.current.style.transform = `translate(0,${place}px)`;\n                // }\n                console.log(place)\n           \n            }\n        })\n        \n\n        return(\n            <div className = {classes.LandingContainer}>\n                <div className = {classes.Landing} ref = {this.state.landingRef}>\n                    <img src = {mice}/>\n                    <p ref = {this.state.phinneyRef}>Phinney Ridge Eyecare</p>\n                   \n                </div>\n                <div className = {classes.PhotoContainer}>\n                </div>\n                <p className = {classes.Come} ref = {this.state.comeRef}>Come Enjoy the View</p>\n                <div className = {classes.StorefrontContainer}>\n                    <img src = {Prstore} ref = {this.state.storeRef}/>\n                    <div className = {classes.Text}>\n                        <h2 className = {classes.TitleBox}>Phinney Ridge Eyecare</h2>\n                        <div className = {classes.Address}>\n                            <p>Dr. Robert Rosales and Dr. Cindy Woo</p>\n                            <p> 7423 Greenwood Avenue North</p>\n                            <p> Seattle, WA</p>\n                        </div>\n                        <div className = {classes.Open}>\n                            <h1>Open Tuesday through Saturday</h1>\n                        </div>\n                       \n                    </div>\n\n                </div>\n            </div>\n            \n            \n            \n        )\n\n\n    }\n\n\n}\n\nexport default Landing;","import React from 'react';\nimport './App.css';\nimport Landing from './Landing'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Landing/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}